---
title: "Modelos de riesgo de crédito con Redes Neuronales Artificiales"
format: 
  html:
    fig-width: 8
    fig-height: 6
    number-sections: true
    math: 
      method: mathjax
      options:
        TeX:
          equationNumbers: { autoNumber: "AMS" }
author:
  - name: "Julián Castaño Pineda"
  - name: "Luis Andrés Altamar Romero"
  - name: "Catalina Restrepo Salgado"
  - name: "Tomás Rodríguez Taborda"
date: "2025-01-23"
categories: [redes neuronales artificiales, desarrollo web, python]
image: "image.jpg"
bibliography: ref.bib
execute:
  cache: true
---

# Introducción a la evaluación y gestión del riesgo de crédito

El riesgo de crédito, de acuerdo con información encontrada en el sitio web @financionario2025 y, en concordancia con lo dicho por @financestrategists2023, se define como una medida empleada para dimensionar el riesgo (en términos de probabilidad) de que un prestatario incumpla con el pago de una obligación financiera o el reembolso del dinero correspondiente a un préstamo.

En este sentido, es posible notar que una correcta evaluación y gestión del riesgo de crédito es de vital importancia en las actividades relacionadas con el préstamo y la inversión, pues ayudan a que las entidades financieras puedan mantener su estabilidad, a la misma vez que se proyectan como instituciones de confianza ante las entidades estatales, sus socios y clientes. Adicionalmente, el riesgo de crédito suele tenerse en cuenta como un criterio a la hora de aprobar o definir las condiciones de un préstamo, solicitando garantías de respaldo al prestatario o ajustando la tasa de interés de acuerdo con estos resultados.

Sabiendo lo anterior, puede decirse que, tanto para las instituciones financieras como para quienes solicitan estos servicios, el riesgo de crédito es un factor de incertidumbre que influye en la toma de decisiones relacionada con la admisión de préstamos y otros productos financieros, entendiendo incertidumbre como "la falta de (...) certeza o de un conocimiento seguro respecto de una determinada situación", según @significadode2023.

![Adaptado de Ilustración del plan de ahorro de los empleados dibujada a mano\[Ilustración\], por Freepik, 2024 (https://www.freepik.es/vector-gratis/ilustracion-plan-ahorro-empleados-dibujada-mano_87161866.htm#fromView=search&page=1&position=11&uuid=e54defbf-b176-455c-82c3-276ae1b3c634&new_detail=true). Licencia gratuita.](imagen_credito.jpg)

## Delimitaciones del problema y metodología

Considerando entonces la importancia del estudio del riesgo de crédito y sus implicaciones en las decisiones que toman las instituciones financieran que invierten y otorgan préstamos, así como las consecuencias que estas decisiones acarrean sobre las personas que los solicitas, se decide abordar esta cuestión a partir desde el punto de vista de los conocimientos adquiridos en el curso. Esto, pues la evaluación del riesgo de crédito involucra tareas como las que se enuncian a continuación:

-   **Manejo de grandes volúmenes de datos:** las entidades financieras o estatales poseen un amplio registro de información sobre los clientes que acceden a estos servicios, tales como sus comportamientos de pago y datos demográficos.

-   **Identificación de patrones no evidentes:** la probabilidad de incumplimiento de un cliente con sus pagos no siempre tendrá una relación lineal con las características que se conocen acerca de su persona, por lo que pueden necesitarse técnicas de mayor complejidad para descubrir los patrones o relaciones que lo explican.

-   **Toma de decisiones basadas en riesgo**: correspondiente al objetivo final de la presente actividad, se es importante realizar una clasificación de los clientes según su nivel de riesgo de crédito, asignando un puntaje que permita evaluar cualitativa y cuantitativamente las solicitudes de préstamo.

Dicho esto, puede verse que la elaboración de una herramienta que permita una evaluación adecuada del riesgo de crédito sería altamente beneficiosa no solo para las entidades financieras, que contarían con un medio de conocer mejor a sus posibles clientes, sino también para estos últimos, pues tendrían la oportunidad de conocer con antelación las posibilidades de que su crédito sea aprobado así como las variables que influirían en esa decisión.

Para tal fin se desarrollará una aplicación web que permitirá responder a la pregunta: *¿cuál es el puntaje de riesgo de crédito de un posible prestatario?* a través de la utilización de un modelo de redes neuronales artificiales entrenado sobre un amplio conjunto de datos en este contexto. El dataset a emplear, titulado **Credit Risk Analysis** y proporcionado por @r_g__2021 será tratado con la siguiente metodología y posteriormente evaluado, como podrá verse más adelante.

**Metodología**

1.  Análisis descriptivo e hipótesis del conjunto de datos.
2.  Planteamiento y evaluación de modelos.
3.  Conclusiones y aprendizajes a partir del modelo.
4.  Planteamiento de un caso de uso.

A continuación se da inicio al desarrollo de la actividad, la cual será complementada con todos los recursos empleados y productos resultantes de dicho ejercicio.

## Análisis descriptivo e hipótesis del conjunto de datos

## Planteamiento y evaluación de modelos

### Modelo de Redes Neuronales Artificiales

Las redes neuronales artificiales son modelos computacionales agrupados dentro del *machine learning*, con los cuales se busca simular el comportamiento del cerebro humano, de acuerdo con @unirrna2021 y @ibmrna2025. Su funcionamiento imita el procedimiento con el que trabajan en conjunto las neuronas biológicas para aprender de la información que reciben desde el exterior o por parte de otras neuronas.

Gracias a su comportamiento, basado en la utilización de datos de entrenamiento para mejorar paulatinamente la precisión de sus resultados, las redes neuronales permiten la realización de tareas que no se podían automatizar en otro tipo de modelos, lo que ha llevado al desarrollo de avances significativos en el área de la inteligencia artificial e impactando de forma directa a las personas e industrias.

Considerando lo dicho anteriormente, es posible ver que las redes neuronales artificiales son una gran alternativa a la hora de enfrentar tareas relacionadas con el aprendizaje a partir de un conjunto de datos, encontrando patrones que puedan explicar el comportamiento de estos últimos respecto de alguna variable objetivo, con la finalidad de tomar una decisión después del entendimiento de dicho fenómeno. En este sentido, será utilizada una red neuronal para mejorar el resultado obtenido con el modelo de baja complejidad en el presente ejercicio.

#### Teorema de Aproximación Universal

Este teorema establece que:

"Cualquier función continua definida en un conjunto compacto puede ser aproximada arbitrariamente bien por una red neuronal feedforward con una sola capa oculta y un número suficiente de neuronas, utilizando funciones de activación no lineales"

Lo anterior significa que las funciones de activación no lineales son esenciales para que las redes neuronales puedan aproximar funciones complejas. Si bien el teorema garantiza que una sola capa oculta con suficientes neuronas puede aproximar cualquier función continua en un conjunto compacto, en la práctica, aumentar el número de capas suele ser más eficiente para modelar problemas complejos.

![Ilustración de los resultados obtenidos mediantes funciones no lineales comparadas con las funciones lineales.](no_linealidad.png)

#### Arquitectura de una red neuronal artificial

Las redes neuronales están compuestas por un conjunto de nodos, que vendrían siendo las neuronas artificiales, repartidos en capas que pertenecen a alguna de las siguientes tres categorías, con información obtenida de @cloudflare y @paroledevs:

-   **Capa de entrada:** esta capa tiene conexión con el "mundo exterior" a la red neuronal artificial, recibiendo los datos iniciales que serán procesados por ella.

-   **Capa de salida:** esta capa proporciona el resultado del procesamiento realizado por la red neuronal, comúnmente como una predicción o una clasificación (lo cual se ve internamente en términos de probabilidad).

-   **Capas ocultas:** una o más capas que se encuentran entre las dos mencionadas anteriormente, realizando el procesamiento y extracción de características de los datos. Este análisis se realiza de menor a mayor profundidad, pues cada capa extrae los patrones más significativos de los datos que recibió como entrada y los envía a una capa superior para que sean vistos con más detalle.

Ahora bien, es conveniente conocer los elementos que componen a cada uno de los nodos que interactúan en las capas anteriormente mencionadas, pues de esta manera será posible comprender la importancia del correcto diseño de la arquitectura de una red neuronal artificial. De acuerdo con @franciscopalaciorna, estos elementos son:

**Entrada:** los datos que recibe la neurona artificial del exterior o de otras neuronas, se representa como un vector $x = (x_1, x_2, ..., x_n)$.

**Pesos sinápticos:** representan los factores de importancia $w_{ij}$ que se le asignan a las entradas que cada neurona recibió de su anterior compañera. Son valores numéricos que se modifican durante el entrenamiento del modelo y poseen una vital importancia en el desempeño de este mismo frente al conjunto de datos del que está aprendiendo.

**Regla de propagación:** una operación que se aplica de forma primordial a los datos de entrada y los pesos para calcular el posible valor de la salida de la neurona artificial; generalmente es una suma ponderada pero también pueden ser otras clases de operaciones.

**Función de activación capa de entrada:** el valor obtenido con la regla de propagación se procesa con a través de esta función, a fin de obtener el verdadero resultado de salida de la neurona. Existe una gran variedad de funciones que se eligen de acuerdo con el objetivo de entrenamiento de la red neuronal artificial, entre las cuales se encuentran las siguientes:

-   Identidad.

La función de identidad es una función lineal que devuelve el mismo valor de entrada como salida: $$ f(x) = x $$

-   Escalón.

La función de escalón devuelve un valor binario dependiendo de si la entrada supera un umbral ( \theta ): $$ f(x) = 
\begin{cases} 
1 & \text{si } x \geq \theta \\ 
0 & \text{si } x < \theta 
\end{cases} $$

-   Lineal a tramos.

La función lineal a tramos aplica una transformación lineal dentro de un rango específico: $$ f(x) = 
\begin{cases} 
0 & \text{si } x \leq 0 \\ 
x & \text{si } 0 < x \leq 1 \\ 
1 & \text{si } x > 1 
\end{cases} $$

-   Sigmoide. La función sigmoide suaviza la salida en un rango entre 0 y 1: $$ f(x) = \frac{1}{1 + e^{-x}} $$

-   Gaussiana. La función gaussiana calcula una salida basada en la forma de una campana, con una media (\mu) y desviación estándar (\sigma): $$ f(x) = e^{-\frac{(x - \mu)^2}{2\sigma^2}} $$

-   Sinusoidal. La función sinusoidal genera una salida oscilatoria basada en una onda sinusoidal: $$ f(x) = \sin(x) $$

**Salida:** resultado $y_i$ del procedimiento aplicado sobre los datos de entrada.

**Función de activación capa de salida:**

-   Softmax: Permite convertir un conjunto de valores en probabilidades que suman 1, su principal uso se encuentra en problemas de clasificación multiclase.

$$
\text{Softmax}(z_i) = \frac{e^{z_i}}{\sum_{j=1}^{n} e^{z_j}}
$$

-   Cross-entropy: Mide la diferencia entre las predicciones $\hat{y_i}$ y la real $y$, para el caso de clasificación lo hace de la siguiente manera:

$$
\text{Cross-Entropy Loss} = - \sum_{i=1}^{n} y_i \log(\hat{y}_i)
$$

-   Sparse Cross-Entropy Loss : Es una variante de Cross-Entropy que no requiere codificación one-hot, sino que trabaja directamente con índices de las clases verdaderas.

$$
\text{Sparse Cross-Entropy Loss} = - \log(\hat{y}_{c})
$$

-   Focal loss: Es una extensión de Cross-Entropy que aplica un factor de penalización para enfocarse más en ejemplos mal clasificados. Es especialmente útil para casos de datasets desbalanceados.

$$
\text{Focal Loss} = - \alpha_t (1 - p_t)^\gamma \log(p_t)
$$

Donde: $$
p_t = \hat{y}_c
$$

#### Tipos de redes neuronales artificiales

Teniendo en cuenta las particularidades de la arquitectura de las redes neuronales artificiales, a continuación se detallan algunos tipos diferentes de modelos, clasificados según su diseño, así como sus correspondientes aplicaciones en diferentes campos de la academia y la industria.

-   **Redes neuronales artificiales perceptrón:** tienen la arquitectura más sencilla, compuesta por nodos con una única función de activación, suelen utilizarse para tareas de clasificación binaria.

-   **Redes neuronales artificiales multicapa:** su arquitectura está conformada por capas de neuronas artificiales interconectadas y son utilizadas para tareas más complejas como toma de decisiones y clasificación multiclase.

-   **Redes neuronales artificiales convolucionales:** estas redes están especialmente diseñadas para realizar tareas relacionadas con el reconocimiento de imágenes, pues utilizan filtros convolucionales para identificar patrones y características especiales en cada pixel.

-   **Redes neuronales artificiales recurrentes:** suelen ser empleadas para tareas como reconocimiento de voz, traducción automática y generación de texto por su capacidad para procesar datos secuenciales, donde toda la información está relacionada entre sí y posee un contexto común para explicarse.

#### Aplicaciones de las redes neuronales artificiales

Algunas de las aplicaciones de las redes neuronales en la actualidad incluyen las siguientes:

-   **Reconocimiento de imágenes:** las redes neuronales pueden ser utilizadas para identificar personas y objetos en imágenes y videos.
-   **Procesamiento del lenguaje natural:** las redes neuronales pueden utilizarse en tareas de comprensión del lenguaje como la traducción automática, la generación de texto y el reconocimiento de voz.
-   **Toma de decisiones:** las redes neuronales pueden ser herramientas de ayuda para la toma de decisiones en situaciones complejas tales como el análisis financiero, que es el caso del presente ejercicio y el diagnóstico médico, entre otras.
-   **Sistemas de recomendación:** las redes neuronales pueden ser empleadas para generar recomendaciones personalizadas con base en las preferencias del usuario en diferentes plataformas de streaming, comercio electrónico y redes sociales. @profedigital

## Construcción del Modelo de Aprendizaje Automático

::: figure
{{< video video.mp4 >}} La conexión entre las diferentes neuronas permite aprendizaje de patrones complejos. Tomado de Sora OpenAI
:::

### Preprocesamiento

Después de haber jugado con el dataset en la sección anterior para los análisis descriptivos y exploratorios, pasamos a realizar el pre procesamiento de los datos necesario para que la arquitectura de la red neuronal sea capaz de recibirlos y además ayudar a mejorar su rendimiento. Iniciamos dividiendo el conjunto de datos en entrenamiento, validación y test para evitar cualquier tipo de data leakage durante el preprocesamiento.

#### Codificación de variables categóricas

Utilizamos tres estrategias para la clasificación de las variables categóricas según su naturaleza

1.  Ordinal Encoder: Esta técnica se aplicó cuando las variables categóricas presentaban un orden natural. La codificación numérica asignada reflejaba este orden, asegurando que los valores fueran representativos de su jerarquía inherente.

2.  Label Encoder: Se empleó en variables categóricas binarias. Este enfoque evitó imponer un orden ficticio entre los valores, lo que podría generar sesgos al interpretar una relación inexistente entre las categorías.

3.  One Hot Encoding: Diseñada para variables categóricas sin un orden natural y con más de dos niveles. Cada categoría fue representada mediante un vector binario, donde un valor de 1 indica pertenencia a una categoría específica y e asigna 0 a las demás. Se prestó especial atención al número de niveles en cada variable. En casos con muchas categorías, esta técnica podría haber generado una matriz de alta dimensionalidad, aumentando los requerimientos computacionales y complicando el entrenamiento de la red neuronal. Para evitar estos problemas, se evaluó cuidadosamente la viabilidad de aplicar este método en cada caso.

#### Selección de características

La técnica de imputación de datos faltantes elegidas fue Iterative Imputer para las variables numéricas debido a que muestra mejores capacidades en manejar relaciones complejas que otros métodos de imputación como lo son la media o similares, gracias a que considera todo el dataset de manera conjunta en lugar de una sola columna. Para el caso de variables catgóricas se utilizo la imputación mediante mediana.

#### Estandarización

Utilizamos **StandardScaler** debido a que normaliza las características centrando su media en 0 y escalando según la desviación estándar, lo cual es crucial en redes neuronales para garantizar estabilidad numérica y mejorar la eficiencia del entrenamiento.

Esto previene problemas como:

-   **Gradiente explosivo**: Valores extremos en las entradas producen gradientes excesivamente grandes, causando desbordamientos numéricos y actualizaciones erráticas de pesos.
-   **Gradiente desvaneciente**: Gradientes extremadamente pequeños ralentizan la convergencia, dificultando el aprendizaje efectivo.

La fórmula utilizada por **StandardScaler** es:

$$
X' = \frac{X - \mu}{\sigma}
$$

donde:

-   $X$: Valor original.
-   $u$: Media de los datos.
-   $sigma$: Desviación estándar de los datos.

Este método asegura que las características tengan una varianza de 1 y estén centradas en 0, permitiendo que funciones de activación como **sigmoid** y **tanh** operen eficientemente.

#### Balanceo de clases

El análisis descriptivo mostró que la variable respuesta del dataset está altamente desbalanceada, lo cual representa un reto significativo al crear el modelo. Un modelo entrenado en estas condiciones puede tender a predecir únicamente la clase mayoritaria, generando métricas como el **accuracy** con valores engañosamente altos, pero sin reflejar una verdadera capacidad predictiva. Para abordar este problema, utilizaremos las siguientes técnicas:

-   **Sobremuestreo y Submuestreo**: Esta estrategia combina el aumento de las clases minoritarias mediante sobremuestreo y la reducción de las clases mayoritarias mediante submuestreo. El objetivo es equilibrar la cantidad de datos entre las clases, incentivando al modelo a aprender las características de todas las clases y mejorando sus métricas al minimizar la función de pérdida. Esto fue utilizado para todas las clases en el entrenamiento y el valor final para cada clase fue el siguiente:
    -   Current: 150.000

    -   Fully Paid: 125.700

    -   Charged Off: 50.000

    -   Default: 50.000

    -   Issued: 50.000

![Ilustración del funcionamiento de las técnicas de sobremuestreo y submuestreo. Tomado de (https://www.datasciencecentral.com/handling-imbalanced-data-sets-in-supervised-learning-using-family/)](muestreo.png)

-   **Agrupamiento de las clases**: En esta estrategia agrupamos algunas de las clases con una menor cantidad de datos, esto debido a que como se verá más adelante son clases que tienen tan pocos datos que predecirlas es altamente complejo, y que pone en evidencia además las limitaciones de técnicas de sobremuestreo y submuestreo en la presencia de clases altamente desbalanceadas.

### Diseño y Arquitectura

Todo lo descrito a continuación fue implementado mediante Tensorflow.

#### Modelo simple

##### Evaluación del modelo

Utilizaremos la métrica más simple posible, que es la que toma Tensorflow por defecto, el accuracy.

**Función de pérdida**

La función de pérdida a elegir, es sparse categorical cross entropy, la cual esta pensada para problemas de clasificación multiclase donde la variable esta codificada mediante Ordinal o Label Encoder, no mediante One Hot Encoding (para este caso usar sparse cross entropy).

##### Capas

1.  Capa de entrada La capa de entrada está definida para recibir un número de características igual a la dimensión de los datos en el conjunto balanceado.

2.  Primera Capa Oculta

    Contiene 32 neuronas con activación ReLU, lo que permite que el modelo aprenda patrones no lineales en los datos. Además se agrego regularización $L_2$ para evitar el sobreajuste, y un dropout del 20% para reducir la posibilidad de sobreajuste.

3.  Capa de Salida

    La capa de salida contiene tantas neuronas como clases en el problema, se utiliza la función de activación softmax para convertir las salidas en probabilidades.

##### Resultados del modelo de baja complejidad

**Evolución de las métricas**

![Evolución de las métricas a través de los epochs.](metricas_baja.png)

Podemos ver como el modelo tiene durante el entrenamiento una función de pérdida muy alta, y un accuracy que en vez de incrementar va disminuyendo y empieza muy alto (más adelante profundizaremos en los motivos por los que pasa esto)

**Reporte de clasificación**

**Matriz de confusión**

![Matriz de confusón del modelo de baja complejidad.](matriz_de_confusion_baja.png)

Podemos ver dificultades para predecir clases como Fully Paid. Predice bien clases como Charged Off y Current.

#### Modelo con mayor complejidad

##### Evaluación del modelo

Dado el desbalance de la variable objetivo, utilizaremos métricas diseñadas para proporcionar una evaluación más equitativa del modelo:

-   **F1-Score Macro**: A diferencia de métricas como el **accuracy**, que tienden a favorecer la clase mayoritaria en datasets desbalanceados, el **F1-Score Macro** asigna igual importancia a todas las clases, independientemente del número de muestras. Esto nos brinda una evaluación más realista del desempeño del modelo.

##### Función de pérdida

Para abordar el desbalance de clases durante el entrenamiento, utilizaremos técnicas como:

-   **Focal Loss**: Esta función de pérdida está diseñada específicamente para problemas de clasificación desbalanceados. Su objetivo es priorizar las clases minoritarias al reducir la importancia de las predicciones correctamente clasificadas para las clases mayoritarias. Esto ayuda al modelo a concentrarse más en aprender las características de las clases menos representadas.

-   **Pesos de las Clases**: En algunos casos, asignar pesos inversamente proporcionales al tamaño de cada clase en la función de pérdida puede ser una estrategia complementaria para equilibrar la importancia de las clases en el modelo.

##### Callbacks

-   **Early Stopping**: Permite reducir los tiempos de entrenamiento al monitorear una métrica, y dado un parámetro de paciencia que indica cuantas Epoch esperar, detiene el entrenamiento si la mejora después de cumplida la paciencia no es lo suficientemente significativa para justificar seguir entrenando.
-   **Reduce Learning Rate on Plateu**: Ayuda a mantener la capacidad de mejora durante el entrenamiento, los cálculos del gradiente, que dependen de la tasa de aprendizaje pueden no ser capaces de llegar al mínimo de la función de pérdida, por lo que este callback reduce la tasa de entrenamiento si para una cantidad de Epochs dada, no ha habida una mejoría en los resultados, esto permite tener un aprendizaje con capacidad de mejoría a través de las Epochs.

##### Capas

Las capas definidas en el modelo fueron las siguiente:

1.  Capa de entrada

    Define el tamaño de entrada , el cual corresponde al numero de características con el dataset ya balanceado, para recibir los datos que serán procesados en las siguientes capas.

2.  Primera Capa Oculta

    Esta capa contiene 128 neuronas con una activación ReLU, que introduce no linealidades y permite que el modelo aprenda patrones complejos. Se utiliza la regularización $L_2$ con un valor de $1 \times 10^{-4}$ para evitar el sobreajuste, penalizando pesos grandes. Se utiliza BatchNormalization() para mantener un entrenamiento estable. Se sigue utilizando un valor de desactivación del 20% para reducir la posibilidad de sobreajuste mediante Dropout().

3.  Segunda Capa Oculta

    La cantidad de neuronas se reduce a 64, permitiendo que el modelo capture características más detalladas y específicas. Se mantiene la normalización y el dropout con los mismos parámetros de la capa anterior.

4.  Tercera Capa Oculta

    La cantidad de neuronas se reduce a 64, permitiendo que el modelo capture características más detalladas y específicas. Se mantiene la normalización y el dropout con los mismos parámetros de la primera capa oculta.

5.  Capa de Salida

    Esta capa tiene una neurona por cada clase del problema de clasificación multiclase. La activación Softmax convierte las salidas en probabilidades, asegurando que la suma de las probabilidades sea igual a 1, lo que es esencial para clasificación multiclase.

##### Resultados del modelo

**Evolución de las métricas**

Se evidencia como la función de pérdida va disminuyendo a lo largo de los epochs, con lo cual vamos obteniendo un accuracy mucho más alto.

![Evolución de las métricas obtenidas por el modelo a través de los Epochs](metricas.png)

Finalmente se ha de observar que en el entrenamiento los resultados son muy estables mostrando una convergencia, mientras que en la validación tiende a fluctuar, pero mostrando buenos resultados a pesar de las flucutaciones, ya que ninguna es extrema.

#### **Reporte de clasificación**

A continuación se muestra una visión mucho más clara de los resultados obtenidos por el modelo para el conjunto de test, ya que en los problemas multiclase ver solo la métrica global calculada por el modelo puede llegar a ser engañoso. Aquí se evidencia como la clase que presenta más dificultades para el modelo fue la clase Default.

**F1-score macro: 0.5439**

**Recall macro: 0.7302**

| **Clase**        | **Precision** | **Recall** | **F1-score** | **Support** |
|------------------|---------------|------------|--------------|-------------|
| **Charged Off**  | 0.3117        | 0.6172     | 0.4142       | 9158        |
| **Current**      | 0.9466        | 0.9471     | 0.9468       | 120122      |
| **Default**      | 0.1646        | 0.1490     | 0.1564       | 4382        |
| **Fully Paid**   | 0.9846        | 0.7334     | 0.8406       | 42111       |
| **Issued**       | 0.4362        | 0.9789     | 0.6034       | 1703        |
| **Accuracy**     | \-            | \-         | 0.8600       | 177476      |
| **Macro avg**    | 0.5687        | 0.6851     | 0.5923       | 177476      |
| **Weighted avg** | 0.8986        | 0.8600     | 0.8713       | 177476      |

``
**Matriz de confusión**

Aquí se observan cuantos datos de cada clase fueron clasificados correctamente en la diagonal principal de la matriz de confusión. Se observan las dificultades que tuvo el modelo, pero también su claridad para predecir algunas de las clases en el problema.

![Matriz de confusión obtenida al evaluar el conjunto de test en el modelo](matriz_de_confusion.png)

Como mejoras a futuro se puede pensar en mejorar el modelo teniendo una mayor cantidad de datos para las clases más difíciles de clasificar junto con una mayor recopilación de información del banco que apunte a las características de estas personas.

## Conclusiones y aprendizajes a partir de los modelos

Podemos ver como se evidencia el problema de utilizar métricas como accuracy en lugar del f1-score cuando los datos se encuentran desbalanceados, resaltando la importancia de hacer un análisis exploratorio del dataset.

Los resultados que se mostrarán a continuación muestran que el desarrollo del modelo fue un problema retador, tanto por el alto volumen de datos, como por el desbalanceo de las clases, par de factores que al juntarse dificultan el problema, sin embargo, fue posible darle un tratamiento correcto para obtener una buena solución al problema. 

#### Pesos del modelo

Después de entrenar el modelo podemos ver cuales son las características más relevantes bajo los paramétros que maximizan la capacidad predictiva del modelo. Debemos tener en cuenta además que debido a que cada capa se concentra en diferentes tipos de patrones, mas simples o complejos, el peso de las características va variando a lo largo del entrenamiento en cada una de ellas. A continuación miraremos para cada capa:

**Primera Capa**

\- **`home_ownership_OWN`**: El prestatario es propietario de su vivienda.

\- **`funded_amnt`**: La cantidad desembolsada del préstamo hasta el momento.

\- **`total_rec_int`**: El interés total recibido.

**Segunda capa**

\- **`revol_util`**: Cantidad de crédito que el prestatario está utilizando en relación con todo el crédito disponible.

-   **`int_rate`**: Tasa de interés del préstamo.

\- **`tot_cur_bal`**: Balance total actual de todas las cuentas del prestatario.

-   **`total_pymnt`**: Pagos totales recibidos hasta la fecha para la cantidad total financiada.

**Tercera capa**

\- **`int_rate`**: Tasa de interés del préstamo.

\- **`dti`**: Porcentaje del ingreso mensual del prestatario destinado al pago de deudas.

\- **`grade_encoded`**: Grado asignado al préstamo por LC.

\- **`installment`**: Pago mensual que debe realizar el prestatario.

\- **`total_rev_hi_lim`**: Límite máximo de crédito disponible en líneas de crédito revolvente.

**Cuarta Capa**

\- **`total_rec_prncp`**: Capital total recibido hasta el momento.

\- **`revol_util`**: Cantidad de crédito que el prestatario está utilizando en relación con todo el crédito disponible.

\- **`tot_cur_bal`**: Balance total actual de todas las cuentas del prestatario.

\- **`home_ownership_OWN`**: El prestatario es propietario de su vivienda.

**Quinta capa**

\- **`tot_cur_bal`**: Balance total actual de todas las cuentas del prestatario.

\- **`total_rec_prncp`**: Capital total recibido hasta la fecha.

\- **`emp_length_encoded`**: Codificación de la longitud del empleo.

\- **`total_rec_late_fee`**: Tarifas por pagos tardíos acumuladas hasta la fecha.

## Puesta en producción del modelo

Debido a la naturaleza del proyecto, tareas como lo son la monitoría del modelo se dejan como futuras mejorías, nos centraremos específicamente en dos.

### Creación de la API

Se utilizó el framework de FastAPI [@fastapi] para convertir el modelo una API que pudiera realizar predicciones pasandole la información de cada usuario. En el GitHub se encuentra el archivo con el código necesario para lograr este resultado.

### Despliegue del modelo

Se utilizo la página de computación en la nube conocida como Render para desplegar el modelo. Esta plataforma fue elegida por su simplicidad para realizar la tarea además de brindar recursos gratuitos para esta tarea.

Para lograr lo anterior se pueden encontrar los siguientes archivosnecesarios para el despliegue en el repositorio desde donde se desplego [Repositorio despliegue del modelo](https://github.com/RNA-y-Algo-Bioinsp-2024-02/model_credit_risk)

-   Dockerfile: Describe como construir la imagen de tal manera que contenga todas las dependencias necesarias define el puerto de ejecución de la API.

-   requirements.txt: Contiene los nombres y las versiones de todos los paquetes necesarios para ejecutar la API.

-   app.py: Archivo con la API creada utilizando FastAPI que define los parámetros necesarios para llamar la API y obtener predicciones con el modelo entrenado.

Además se agregó un workflow con GitHub Actions para automatizar el despliegue del modelo a la última versión en Render, lo cual es el inicio del monitoreo necesario para el modelo como un agregado que se puede profundizar más en el futuro.

## Caso de uso

A continuación mostraremos un caso de uso de como el uso del modelo a través de la aplicación web puede traer beneficios al banco en la toma de decisiones y darle claridad a los usuarios en cuanto a los motivos por los que se toman decisiones con sus préstamos, como lo son la venta de carteras o similares.

**Caso del banco**

**Caso del usuario**

# Aplicación web

# Video publicitario

## Contribuciones individuales

Las contribuciones realizadas por cada uno de los integrantes del equipo en el desarrollo de los ejercicios correspondientes a **Modelos de riesgo de crédito con Redes Neuronales Artificiales** se muestran en el siguiente video.
